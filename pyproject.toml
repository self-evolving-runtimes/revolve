[project]
name = "selfrevolve"
version = "0.1.1/beta"
description = "A project for generating RESTful apis given a database"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Topic :: Database :: Front-Ends",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
license = "MIT"
license-files = ["LICENSE"]
dependencies = [
    "python-dotenv",
    "langgraph",
    "pytest",
    "falcon",
    "pytest-json-report>=1.5.0",
    "langchain-openai>=0.3.15",
    "ipython>=9.2.0",
    "psycopg2-binary>=2.9.10",
    "falcon-cors>=1.1.7",
    "sqlparse>=0.5.3",
    "loguru>=0.7.3",
    "pymongo>=4.13.0",
]

[project.urls]
Homepage = "https://github.com/self-evolving-runtimes/revolve"
Issues = "https://github.com/self-evolving-runtimes/revolve/issues"

[project.scripts]
revolve-api = "revolve.api:main"

[build-system]
requires = ["hatchling", "hatch-build-scripts"]
build-backend = "hatchling.build"

[tool.hatch.build]
# Tells Hatch that packages live under `src/`
sources = ["src"]

# Static files to include in the wheel
artifacts = [
  "src/revolve/ui/dist/**",
  "src/revolve/resources/**"
]

[tool.hatch.build.targets.wheel]
# Include all Python + resource files
include = [
    "src/revolve/**",
    "dist"
]

[tool.hatch.build.targets.sdist.hooks.build-scripts]
enable-by-default = false

[[tool.hatch.build.targets.wheel.hooks.build-scripts.scripts]]
commands = [
    "rm -rf node_modules || true",
    "rm -rf dist || true",
    "rm -rf package-lock.json || true",
    "rm -rf yarn.lock || true",
    "npm install",
    "npm run build"
]
work_dir = "src/revolve/ui"
artifacts = ["dist"]

[dependency-groups]
dev = [
    "ruff>=0.11.10",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
